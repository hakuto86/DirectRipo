#include  "input.h"

//マクロ定義
#define NUM_KEY_MAX (256) //キーの最大数

//グローバル変数
LPDIRECTINPUT8 g_pInput = NULL;  //DirectInputオブジェクトへのポインタ
LPDIRECTINPUTDEVICE8 g_pDev_Keyboard = NULL;  //入力デバイス(キーボード)へのポインタ
BYTE g_aKeyState[NUM_KEY_MAX];  //キーボードのプレス情報
BYTE g_aKeyStateTrigger[NUM_KEY_MAX];  //キーボードのトリガー情報

//==================================================================
//キーボードの初期化処理
//==================================================================
HRESULT InitKeyboard(HINSTANCE hInstance, HWND hWnd)
{
	//DirectInputオブジェクトの生成
	if (FAILED(DirectInput8Create(hInstance, DIRECTINPUT_VERSION, IID_IDirectInput8, (void**)&g_pInput, NULL)))
	{
		return E_FAIL;
	}

	//入力デバイス(キーボード)の生成
	if (FAILED(g_pInput->CreateDevice(GUID_SysKeyboard, &g_pDev_Keyboard, NULL)))
	{
		return E_FAIL;
	}

	//データフォーマットを設定
	if (FAILED(g_pDev_Keyboard->SetDataFormat(&c_dfDIKeyboard)))
	{
		return E_FAIL;
	}

	//協調モードを設定
	if (FAILED(g_pDev_Keyboard -> SetCooperativeLevel(hWnd, (DISCL_FOREGROUND | DISCL_NONEXCLUSIVE))))
	{
		return E_FAIL;
	}

	//キーボードへのアクセス権を獲得
	g_pDev_Keyboard->Acquire();
	return S_OK;
}

//==================================================================
//キーボードの終了処理
//==================================================================
void UninitKeyboard(void)
{
	//入力デバイス(キーボード)の破棄
	if (g_pDev_Keyboard != NULL)
	{
		g_pDev_Keyboard->Unacquire();  //キーボードへのアクセス権を破棄
		g_pDev_Keyboard->Release();
		g_pDev_Keyboard = NULL;
	}

	//DirectInputオブジェクトの破棄
	if (g_pInput != NULL)
	{
		g_pInput->Release();
		g_pInput = NULL;
	}
}

//==================================================================
//キーボードの更新処理
//==================================================================
void UpdateKeyboard(void)
{
	BYTE aKeyState[NUM_KEY_MAX];  //キーボードの入力情報
	int nCntKey;
	
	//入力デバイスからデータを取得
	if (SUCCEEDED(g_pDev_Keyboard->GetDeviceState(sizeof(aKeyState), &aKeyState[0])))
	{
		for (nCntKey = 0; nCntKey < NUM_KEY_MAX; nCntKey++)
		{
			g_aKeyStateTrigger[nCntKey] = (g_aKeyState[nCntKey] ^ aKeyState[nCntKey]) & aKeyState[nCntKey];//キーボードのトリガー情報を保存
			g_aKeyState[nCntKey] = aKeyState[nCntKey];  //キーボードのプレス情報を保存
		}
	}
	else
	{
		g_pDev_Keyboard->Acquire();  //キーボードへのアクセス権を獲得
	}
}

//==================================================================
//キーボードプレスの情報を取得
//==================================================================
bool GetKeyboardPress(int nKey)
{
	return(g_aKeyState[nKey] & 0x80) ? true : false;
}

//==================================================================
//キーボードトリガーの情報を取得
//==================================================================
bool GetKeyboardTrigger(int nKey)
{
	return(g_aKeyStateTrigger[nKey] & 0x80) ? true : false;
}